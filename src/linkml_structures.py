import datetime
from collections import defaultdict

def linkml_schema(graph_name, graph_title):
    update_time = f"{datetime.datetime.now().isoformat()}"
    return {
        "id": graph_name,
        "version": "No schema version available",
        "imports": set(['linkml:types']),
        "license": "No schema license specified",
        "prefixes": {"linkml": "https://w3id.org/linkml/"},
        # emit_prefixes
        # default_curi_maps
        # default_prefix
        # default_range
        # subsets
        # types
        # enums
        "slots": defaultdict(linkml_slot),
        "classes": defaultdict(linkml_class),
        # metamodel_version
        # source_file
        # source_file_date
        # source_file_size
        # generation_date
        # slot_names_unique
        # settings
        # bindings
        "name": graph_name,
        # id_prefixes
        # id_prefixes_are_closed
        # definition_uri
        # local_names
        "conforms_to": "No schema conformance document specified",
        # implements
        # instantiates
        # extensions
        # annotations
        "description": "No schema description specified",
        # alt_descriptions
        "title": graph_title or "No schema name specified",
        # deprecated
        # todos
        # notes
        # comments
        # examples
        # in_subset
        # from_schema
        # imported_from
        # source
        # in_language
        # see_also
        # deprecated_element_has_exact_replacement
        # deprecated_element_has_possible_replacement
        # aliases
        # structured_aliases
        # mappings
        # exact_mappings
        # close_mappings
        # related_mappings
        # narrow_mappings
        # broad_mappings
        # created_by
        # contributors
        "created_on": update_time,
        "last_updated_on": update_time,
        # modified_by
        # status
        # rank
        # categories
        # keywords
    }

def linkml_class():
    return {
        'slots': set(),
        'slot_usage': {},
        # attributes
        'class_uri': "",
        # subclass_of
        # union_of
        # defining_slots
        # tree_root
        # unique_keys
        # rules
        # classification_rules
        # slot_names_unique
        # represents_relationship
        # disjoint_with
        # children_are_mutually_disjoint
        # any_of
        # exactly_one_of
        # none_of
        # all_of
        # slot_conditions
        # is_a
        # abstract
        # mixin
        # mixins
        # apply_to
        # values_from
        # string_serialization
        'name': "",
        # id_prefixes
        # id_prefixes_are_closed
        # definition_uri
        # local_names
        "conforms_to": "No schema conformance document specified",
        # implements
        # instantiates
        # extensions
        'annotations': {
            'count': 0
        },
        'description': 'No class (type) description specified',
        # alt_descriptions
        'title': "No class (type) name specified",
        # deprecated
        # todos
        'notes': [],
        # comments
        # examples
        # in_subset
        # from_schema
        # imported_from
        # source
        # in_language
        # see_also
        # deprecated_element_has_exact_replacement
        # deprecated_element_has_possible_replacement
        # aliases
        # structured_aliases
        # mappings
        # exact_mappings
        # close_mappings
        # related_mappings
        # narrow_mappings
        # broad_mappings
        # created_by
        # contributors
        # created_on
        # last_updated_on
        # modified_by
        # status
        # rank
        # categories
        # keywords
    }

def linkml_slot():
    return {
        # singular_name
        # domain
        'slot_uri': '',
        # array
        # inherited
        # readonly
        # ifabsent
        # list_elements_unique
        # list_elements_ordered
        # shared
        # key
        # identifier
        # designates_type
        # alias
        # owner
        # domain_of
        # subproperty_of
        # symmetric
        # reflexive
        # locally_reflexive
        # irreflexive
        # asymmetric
        # transitive
        # inverse
        # is_class_field
        # transitive_form_of
        # reflexive_transitive_form_of
        # role
        # is_usage_slot
        # usage_slot_name
        # relational_role
        # slot_group
        # is_grouping_slot
        # path_rule
        # disjoint_with
        # children_are_mutually_disjoint
        'union_of': set(),
        # type_mappings
        'range': 'Any',
        # range_expression
        # enum_range
        # bindings
        # required
        # recommended
        # multivalued
        # inlined
        # inlined_as_list
        # minimum_value
        # maximum_value
        # pattern
        # structured_pattern
        # unit
        # implicit_prefix
        # value_presence
        # equals_string
        # equals_string_in
        # equals_number
        # equals_expression
        # exact_cardinality
        # minimum_cardinality
        # maximum_cardinality
        # has_member
        # all_members
        # none_of
        # exactly_one_of
        'any_of': set(),
        # all_of
        # is_a
        # abstract
        # mixin
        # mixins
        # apply_to
        # values_from
        # string_serialization
        # name
        # id_prefixes
        # id_prefixes_are_closed
        # definition_uri
        # local_names
        # conforms_to
        # implements
        # instantiates
        # extensions
        'annotations': {
            'count': 0
        },
        'description': 'No slot (predicate) description specified',
        # alt_descriptions
        # title
        # deprecated
        # todos
        # notes
        'comments': [],
        'examples': {},
        # in_subset
        # from_schema
        # imported_from
        # source
        # in_language
        # see_also
        # deprecated_element_has_exact_replacement
        # deprecated_element_has_possible_replacement
        # aliases
        # structured_aliases
        # mappings
        # exact_mappings
        # close_mappings
        # related_mappings
        # narrow_mappings
        # broad_mappings
        # created_by
        # contributors
        # created_on
        # last_updated_on
        # modified_by
        # status
        # rank
        # categories
        # keywords
    }

